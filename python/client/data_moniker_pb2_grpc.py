# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import data_moniker_pb2 as data__moniker__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in data_moniker_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MonikerServiceStub(object):
    """---------------------------------------------------------------------
    ---------------------------------------------------------------------
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BeginSidebandStream = channel.unary_unary(
                '/ni.data_monikers.MonikerService/BeginSidebandStream',
                request_serializer=data__moniker__pb2.BeginMonikerSidebandStreamRequest.SerializeToString,
                response_deserializer=data__moniker__pb2.BeginMonikerSidebandStreamResponse.FromString,
                _registered_method=True)
        self.StreamReadWrite = channel.stream_stream(
                '/ni.data_monikers.MonikerService/StreamReadWrite',
                request_serializer=data__moniker__pb2.MonikerWriteRequest.SerializeToString,
                response_deserializer=data__moniker__pb2.MonikerReadResult.FromString,
                _registered_method=True)
        self.StreamRead = channel.unary_stream(
                '/ni.data_monikers.MonikerService/StreamRead',
                request_serializer=data__moniker__pb2.MonikerList.SerializeToString,
                response_deserializer=data__moniker__pb2.MonikerReadResult.FromString,
                _registered_method=True)
        self.StreamWrite = channel.stream_stream(
                '/ni.data_monikers.MonikerService/StreamWrite',
                request_serializer=data__moniker__pb2.MonikerWriteRequest.SerializeToString,
                response_deserializer=data__moniker__pb2.StreamWriteResponse.FromString,
                _registered_method=True)


class MonikerServiceServicer(object):
    """---------------------------------------------------------------------
    ---------------------------------------------------------------------
    """

    def BeginSidebandStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamReadWrite(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamWrite(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MonikerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BeginSidebandStream': grpc.unary_unary_rpc_method_handler(
                    servicer.BeginSidebandStream,
                    request_deserializer=data__moniker__pb2.BeginMonikerSidebandStreamRequest.FromString,
                    response_serializer=data__moniker__pb2.BeginMonikerSidebandStreamResponse.SerializeToString,
            ),
            'StreamReadWrite': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamReadWrite,
                    request_deserializer=data__moniker__pb2.MonikerWriteRequest.FromString,
                    response_serializer=data__moniker__pb2.MonikerReadResult.SerializeToString,
            ),
            'StreamRead': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamRead,
                    request_deserializer=data__moniker__pb2.MonikerList.FromString,
                    response_serializer=data__moniker__pb2.MonikerReadResult.SerializeToString,
            ),
            'StreamWrite': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamWrite,
                    request_deserializer=data__moniker__pb2.MonikerWriteRequest.FromString,
                    response_serializer=data__moniker__pb2.StreamWriteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ni.data_monikers.MonikerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ni.data_monikers.MonikerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MonikerService(object):
    """---------------------------------------------------------------------
    ---------------------------------------------------------------------
    """

    @staticmethod
    def BeginSidebandStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ni.data_monikers.MonikerService/BeginSidebandStream',
            data__moniker__pb2.BeginMonikerSidebandStreamRequest.SerializeToString,
            data__moniker__pb2.BeginMonikerSidebandStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamReadWrite(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/ni.data_monikers.MonikerService/StreamReadWrite',
            data__moniker__pb2.MonikerWriteRequest.SerializeToString,
            data__moniker__pb2.MonikerReadResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ni.data_monikers.MonikerService/StreamRead',
            data__moniker__pb2.MonikerList.SerializeToString,
            data__moniker__pb2.MonikerReadResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamWrite(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/ni.data_monikers.MonikerService/StreamWrite',
            data__moniker__pb2.MonikerWriteRequest.SerializeToString,
            data__moniker__pb2.StreamWriteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
