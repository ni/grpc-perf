//---------------------------------------------------------------------
//---------------------------------------------------------------------
syntax = "proto3";

//---------------------------------------------------------------------
//---------------------------------------------------------------------
import "google/protobuf/any.proto";

//---------------------------------------------------------------------
//---------------------------------------------------------------------
option cc_enable_arenas = true;

//---------------------------------------------------------------------
//---------------------------------------------------------------------
package niPerfTest;

//---------------------------------------------------------------------
//---------------------------------------------------------------------
service MonikerService {
  rpc BeginMonikerSidebandStream(BeginMonikerSidebandStreamRequest) returns (BeginMonikerSidebandStreamResponse) {};

  rpc StreamReadWrite(stream MonikerWriteRequest) returns (stream MonikerReadResponse) {};
  rpc StreamRead(MonikerList) returns (stream MonikerReadResponse) {};
  rpc StreamWrite(stream MonikerWriteRequest) returns (stream StreamWriteResponse) {};
}

enum SidebandStrategy
{
  UNKNOWN = 0;
  GRPC = 1;
  SHARED_MEMORY = 2;
  DOUBLE_BUFFERED_SHARED_MEMORY = 3;
  SOCKETS = 4;
  HYPERVISOR_SOCKETS = 5;
  RDMA = 6;
  RDMA_LOW_LATENCY = 7;
}

message Moniker {
  string ServiceLocation = 1;
  string DataSource = 2;
  sint64 DataInstance = 3;
}

message BeginMonikerSidebandStreamRequest {
  SidebandStrategy strategy = 1;
}

message BeginMonikerSidebandStreamResponse {  
  SidebandStrategy strategy = 1;
  string connection_url = 2;
  string sideband_identifier = 3;
  sint64 buffer_size = 4;
}

message MonikerWriteRequest {
  oneof WriteData {
    MonikerList monikers = 1;
    MonikerWriteData data = 2;
  }
}

message MonikerWriteData {
  repeated google.protobuf.Any Values = 1;
}

message MonikerReadResponse {
  repeated google.protobuf.Any Values = 1;
}

message MonikerList {
  bool isInitialWrite = 1;
  repeated Moniker ReadMonikers = 2;
  repeated Moniker WriteMonikers = 3;
}

message StreamWriteResponse {
}

//---------------------------------------------------------------------
// The niPerfTest service definition.
//---------------------------------------------------------------------
service niPerfTestService {
  rpc StreamLatencyTest(stream StreamLatencyClient) returns (stream StreamLatencyServer) {};
  rpc StreamLatencyTestClient(stream StreamLatencyClient) returns (StreamLatencyServer) {};
  rpc StreamLatencyTestServer(StreamLatencyClient) returns (stream StreamLatencyServer) {};
  rpc TestWrite(TestWriteParameters) returns (TestWriteResult) {};
  rpc TestWriteContinuously(stream TestWriteParameters) returns (stream TestWriteResult) {};

  rpc BeginTestSidebandStream(BeginTestSidebandStreamRequest) returns (BeginTestSidebandStreamResponse) {};
  rpc TestSidebandStream(stream TestSidebandStreamRequest) returns (stream TestSidebandStreamResponse) {};

  rpc Init(InitParameters) returns (InitResult) {};
  rpc ConfigureVertical(ConfigureVerticalRequest) returns (ConfigureVerticalResponse);
  rpc ConfigureHorizontalTiming(ConfigureHorizontalTimingRequest) returns (ConfigureHorizontalTimingResponse);    
  rpc InitiateAcquisition(InitiateAcquisitionRequest) returns (InitiateAcquisitionResponse);
  rpc Read(ReadParameters) returns (ReadResult) {};
  rpc ReadContinuously(ReadContinuouslyParameters) returns (stream ReadContinuouslyResult) {};
}

message BeginTestSidebandStreamRequest {
  SidebandStrategy strategy = 1;
  int32 num_samples = 2;
  bool use_fast_memcpy = 3;
}

message BeginTestSidebandStreamResponse {  
  SidebandStrategy strategy = 1;
  string connection_url = 2;
  string sideband_identifier = 3;
}

message TestSidebandStreamRequest {
  SidebandStrategy strategy = 1;
  string sideband_identifier = 2;
  int32 num_samples = 3;
}

message TestSidebandStreamResponse {
  string sideband_location = 1;
}
    
message StreamLatencyClient {
  uint32 message = 1;
}

message StreamLatencyServer {
  uint32 message = 1;
}

message InitParameters {
  string command = 1;
  int32 id = 2;
}
    
message InitResult {
  int32 status = 1;
}

message ReadParameters {
  double timeout = 1;
  int32 num_samples = 2;
}
    
message ReadResult {
  int32 status = 1;
  repeated double samples = 2;
}

message TestWriteParameters {
  repeated double samples = 2;
}

message TestWriteResult {
  int32 status = 1;
}

message ReadContinuouslyParameters {
  int32 num_iterations = 1;
  int32 num_samples = 2;
}
    
message ReadContinuouslyResult {
  int32 status = 1;
  repeated double wfm = 2;
}

message ConfigureHorizontalTimingRequest {
  string vi = 1;
  double min_sample_rate = 2;
  sint32 min_num_pts = 3;
  double ref_position = 4;
  sint32 num_records = 5;
  bool enforce_realtime = 6;
}

message ConfigureHorizontalTimingResponse {
  int32 status = 1;
}

enum VerticalCoupling {
  option allow_alias = true;
  VERTICAL_COUPLING_UNSPECIFIED = 0;
  VERTICAL_COUPLING_NISCOPE_VAL_AC = 0;
  VERTICAL_COUPLING_NISCOPE_VAL_DC = 1;
  VERTICAL_COUPLING_NISCOPE_VAL_GND = 2;
}

message ConfigureVerticalRequest {
  string vi = 1;
  string channel_list = 2;
  double range = 3;
  double offset = 4;
  oneof coupling_enum {
    VerticalCoupling coupling = 5;
    sint32 coupling_raw = 6;
  }
  double probe_attenuation = 7;
  bool enabled = 8;
}

message ConfigureVerticalResponse {
  int32 status = 1;
}

message InitiateAcquisitionResponse {
  enum StatusCode {
    default = 0;
    good = 1;
     bad = 2;
  }
  int32 status = 1;
}
  
message InitiateAcquisitionRequest {
  string vi = 1;
  InitiateAcquisitionResponse.StatusCode code = 2;
}
