// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: perftest.proto

package perftest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NiPerfTestServiceClient is the client API for NiPerfTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NiPerfTestServiceClient interface {
	StreamLatencyTest(ctx context.Context, opts ...grpc.CallOption) (NiPerfTestService_StreamLatencyTestClient, error)
	StreamLatencyTestClient(ctx context.Context, opts ...grpc.CallOption) (NiPerfTestService_StreamLatencyTestClientClient, error)
	StreamLatencyTestServer(ctx context.Context, in *StreamLatencyClient, opts ...grpc.CallOption) (NiPerfTestService_StreamLatencyTestServerClient, error)
	TestWrite(ctx context.Context, in *TestWriteParameters, opts ...grpc.CallOption) (*TestWriteResult, error)
	TestWriteContinuously(ctx context.Context, opts ...grpc.CallOption) (NiPerfTestService_TestWriteContinuouslyClient, error)
	BeginTestSidebandStream(ctx context.Context, in *BeginTestSidebandStreamRequest, opts ...grpc.CallOption) (*BeginTestSidebandStreamResponse, error)
	TestSidebandStream(ctx context.Context, opts ...grpc.CallOption) (NiPerfTestService_TestSidebandStreamClient, error)
	Init(ctx context.Context, in *InitParameters, opts ...grpc.CallOption) (*InitResult, error)
	ConfigureVertical(ctx context.Context, in *ConfigureVerticalRequest, opts ...grpc.CallOption) (*ConfigureVerticalResponse, error)
	ConfigureHorizontalTiming(ctx context.Context, in *ConfigureHorizontalTimingRequest, opts ...grpc.CallOption) (*ConfigureHorizontalTimingResponse, error)
	InitiateAcquisition(ctx context.Context, in *InitiateAcquisitionRequest, opts ...grpc.CallOption) (*InitiateAcquisitionResponse, error)
	Read(ctx context.Context, in *ReadParameters, opts ...grpc.CallOption) (*ReadResult, error)
	ReadComplex(ctx context.Context, in *ReadParameters, opts ...grpc.CallOption) (*ReadComplexResult, error)
	ReadComplexArena(ctx context.Context, in *ReadParameters, opts ...grpc.CallOption) (*ReadComplexResult, error)
	ReadContinuously(ctx context.Context, in *ReadContinuouslyParameters, opts ...grpc.CallOption) (NiPerfTestService_ReadContinuouslyClient, error)
}

type niPerfTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNiPerfTestServiceClient(cc grpc.ClientConnInterface) NiPerfTestServiceClient {
	return &niPerfTestServiceClient{cc}
}

func (c *niPerfTestServiceClient) StreamLatencyTest(ctx context.Context, opts ...grpc.CallOption) (NiPerfTestService_StreamLatencyTestClient, error) {
	stream, err := c.cc.NewStream(ctx, &NiPerfTestService_ServiceDesc.Streams[0], "/niPerfTest.niPerfTestService/StreamLatencyTest", opts...)
	if err != nil {
		return nil, err
	}
	x := &niPerfTestServiceStreamLatencyTestClient{stream}
	return x, nil
}

type NiPerfTestService_StreamLatencyTestClient interface {
	Send(*StreamLatencyClient) error
	Recv() (*StreamLatencyServer, error)
	grpc.ClientStream
}

type niPerfTestServiceStreamLatencyTestClient struct {
	grpc.ClientStream
}

func (x *niPerfTestServiceStreamLatencyTestClient) Send(m *StreamLatencyClient) error {
	return x.ClientStream.SendMsg(m)
}

func (x *niPerfTestServiceStreamLatencyTestClient) Recv() (*StreamLatencyServer, error) {
	m := new(StreamLatencyServer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *niPerfTestServiceClient) StreamLatencyTestClient(ctx context.Context, opts ...grpc.CallOption) (NiPerfTestService_StreamLatencyTestClientClient, error) {
	stream, err := c.cc.NewStream(ctx, &NiPerfTestService_ServiceDesc.Streams[1], "/niPerfTest.niPerfTestService/StreamLatencyTestClient", opts...)
	if err != nil {
		return nil, err
	}
	x := &niPerfTestServiceStreamLatencyTestClientClient{stream}
	return x, nil
}

type NiPerfTestService_StreamLatencyTestClientClient interface {
	Send(*StreamLatencyClient) error
	CloseAndRecv() (*StreamLatencyServer, error)
	grpc.ClientStream
}

type niPerfTestServiceStreamLatencyTestClientClient struct {
	grpc.ClientStream
}

func (x *niPerfTestServiceStreamLatencyTestClientClient) Send(m *StreamLatencyClient) error {
	return x.ClientStream.SendMsg(m)
}

func (x *niPerfTestServiceStreamLatencyTestClientClient) CloseAndRecv() (*StreamLatencyServer, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamLatencyServer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *niPerfTestServiceClient) StreamLatencyTestServer(ctx context.Context, in *StreamLatencyClient, opts ...grpc.CallOption) (NiPerfTestService_StreamLatencyTestServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &NiPerfTestService_ServiceDesc.Streams[2], "/niPerfTest.niPerfTestService/StreamLatencyTestServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &niPerfTestServiceStreamLatencyTestServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NiPerfTestService_StreamLatencyTestServerClient interface {
	Recv() (*StreamLatencyServer, error)
	grpc.ClientStream
}

type niPerfTestServiceStreamLatencyTestServerClient struct {
	grpc.ClientStream
}

func (x *niPerfTestServiceStreamLatencyTestServerClient) Recv() (*StreamLatencyServer, error) {
	m := new(StreamLatencyServer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *niPerfTestServiceClient) TestWrite(ctx context.Context, in *TestWriteParameters, opts ...grpc.CallOption) (*TestWriteResult, error) {
	out := new(TestWriteResult)
	err := c.cc.Invoke(ctx, "/niPerfTest.niPerfTestService/TestWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *niPerfTestServiceClient) TestWriteContinuously(ctx context.Context, opts ...grpc.CallOption) (NiPerfTestService_TestWriteContinuouslyClient, error) {
	stream, err := c.cc.NewStream(ctx, &NiPerfTestService_ServiceDesc.Streams[3], "/niPerfTest.niPerfTestService/TestWriteContinuously", opts...)
	if err != nil {
		return nil, err
	}
	x := &niPerfTestServiceTestWriteContinuouslyClient{stream}
	return x, nil
}

type NiPerfTestService_TestWriteContinuouslyClient interface {
	Send(*TestWriteParameters) error
	Recv() (*TestWriteResult, error)
	grpc.ClientStream
}

type niPerfTestServiceTestWriteContinuouslyClient struct {
	grpc.ClientStream
}

func (x *niPerfTestServiceTestWriteContinuouslyClient) Send(m *TestWriteParameters) error {
	return x.ClientStream.SendMsg(m)
}

func (x *niPerfTestServiceTestWriteContinuouslyClient) Recv() (*TestWriteResult, error) {
	m := new(TestWriteResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *niPerfTestServiceClient) BeginTestSidebandStream(ctx context.Context, in *BeginTestSidebandStreamRequest, opts ...grpc.CallOption) (*BeginTestSidebandStreamResponse, error) {
	out := new(BeginTestSidebandStreamResponse)
	err := c.cc.Invoke(ctx, "/niPerfTest.niPerfTestService/BeginTestSidebandStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *niPerfTestServiceClient) TestSidebandStream(ctx context.Context, opts ...grpc.CallOption) (NiPerfTestService_TestSidebandStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &NiPerfTestService_ServiceDesc.Streams[4], "/niPerfTest.niPerfTestService/TestSidebandStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &niPerfTestServiceTestSidebandStreamClient{stream}
	return x, nil
}

type NiPerfTestService_TestSidebandStreamClient interface {
	Send(*TestSidebandStreamRequest) error
	Recv() (*TestSidebandStreamResponse, error)
	grpc.ClientStream
}

type niPerfTestServiceTestSidebandStreamClient struct {
	grpc.ClientStream
}

func (x *niPerfTestServiceTestSidebandStreamClient) Send(m *TestSidebandStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *niPerfTestServiceTestSidebandStreamClient) Recv() (*TestSidebandStreamResponse, error) {
	m := new(TestSidebandStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *niPerfTestServiceClient) Init(ctx context.Context, in *InitParameters, opts ...grpc.CallOption) (*InitResult, error) {
	out := new(InitResult)
	err := c.cc.Invoke(ctx, "/niPerfTest.niPerfTestService/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *niPerfTestServiceClient) ConfigureVertical(ctx context.Context, in *ConfigureVerticalRequest, opts ...grpc.CallOption) (*ConfigureVerticalResponse, error) {
	out := new(ConfigureVerticalResponse)
	err := c.cc.Invoke(ctx, "/niPerfTest.niPerfTestService/ConfigureVertical", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *niPerfTestServiceClient) ConfigureHorizontalTiming(ctx context.Context, in *ConfigureHorizontalTimingRequest, opts ...grpc.CallOption) (*ConfigureHorizontalTimingResponse, error) {
	out := new(ConfigureHorizontalTimingResponse)
	err := c.cc.Invoke(ctx, "/niPerfTest.niPerfTestService/ConfigureHorizontalTiming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *niPerfTestServiceClient) InitiateAcquisition(ctx context.Context, in *InitiateAcquisitionRequest, opts ...grpc.CallOption) (*InitiateAcquisitionResponse, error) {
	out := new(InitiateAcquisitionResponse)
	err := c.cc.Invoke(ctx, "/niPerfTest.niPerfTestService/InitiateAcquisition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *niPerfTestServiceClient) Read(ctx context.Context, in *ReadParameters, opts ...grpc.CallOption) (*ReadResult, error) {
	out := new(ReadResult)
	err := c.cc.Invoke(ctx, "/niPerfTest.niPerfTestService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *niPerfTestServiceClient) ReadComplex(ctx context.Context, in *ReadParameters, opts ...grpc.CallOption) (*ReadComplexResult, error) {
	out := new(ReadComplexResult)
	err := c.cc.Invoke(ctx, "/niPerfTest.niPerfTestService/ReadComplex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *niPerfTestServiceClient) ReadComplexArena(ctx context.Context, in *ReadParameters, opts ...grpc.CallOption) (*ReadComplexResult, error) {
	out := new(ReadComplexResult)
	err := c.cc.Invoke(ctx, "/niPerfTest.niPerfTestService/ReadComplexArena", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *niPerfTestServiceClient) ReadContinuously(ctx context.Context, in *ReadContinuouslyParameters, opts ...grpc.CallOption) (NiPerfTestService_ReadContinuouslyClient, error) {
	stream, err := c.cc.NewStream(ctx, &NiPerfTestService_ServiceDesc.Streams[5], "/niPerfTest.niPerfTestService/ReadContinuously", opts...)
	if err != nil {
		return nil, err
	}
	x := &niPerfTestServiceReadContinuouslyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NiPerfTestService_ReadContinuouslyClient interface {
	Recv() (*ReadContinuouslyResult, error)
	grpc.ClientStream
}

type niPerfTestServiceReadContinuouslyClient struct {
	grpc.ClientStream
}

func (x *niPerfTestServiceReadContinuouslyClient) Recv() (*ReadContinuouslyResult, error) {
	m := new(ReadContinuouslyResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NiPerfTestServiceServer is the server API for NiPerfTestService service.
// All implementations must embed UnimplementedNiPerfTestServiceServer
// for forward compatibility
type NiPerfTestServiceServer interface {
	StreamLatencyTest(NiPerfTestService_StreamLatencyTestServer) error
	StreamLatencyTestClient(NiPerfTestService_StreamLatencyTestClientServer) error
	StreamLatencyTestServer(*StreamLatencyClient, NiPerfTestService_StreamLatencyTestServerServer) error
	TestWrite(context.Context, *TestWriteParameters) (*TestWriteResult, error)
	TestWriteContinuously(NiPerfTestService_TestWriteContinuouslyServer) error
	BeginTestSidebandStream(context.Context, *BeginTestSidebandStreamRequest) (*BeginTestSidebandStreamResponse, error)
	TestSidebandStream(NiPerfTestService_TestSidebandStreamServer) error
	Init(context.Context, *InitParameters) (*InitResult, error)
	ConfigureVertical(context.Context, *ConfigureVerticalRequest) (*ConfigureVerticalResponse, error)
	ConfigureHorizontalTiming(context.Context, *ConfigureHorizontalTimingRequest) (*ConfigureHorizontalTimingResponse, error)
	InitiateAcquisition(context.Context, *InitiateAcquisitionRequest) (*InitiateAcquisitionResponse, error)
	Read(context.Context, *ReadParameters) (*ReadResult, error)
	ReadComplex(context.Context, *ReadParameters) (*ReadComplexResult, error)
	ReadComplexArena(context.Context, *ReadParameters) (*ReadComplexResult, error)
	ReadContinuously(*ReadContinuouslyParameters, NiPerfTestService_ReadContinuouslyServer) error
	mustEmbedUnimplementedNiPerfTestServiceServer()
}

// UnimplementedNiPerfTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNiPerfTestServiceServer struct {
}

func (UnimplementedNiPerfTestServiceServer) StreamLatencyTest(NiPerfTestService_StreamLatencyTestServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLatencyTest not implemented")
}
func (UnimplementedNiPerfTestServiceServer) StreamLatencyTestClient(NiPerfTestService_StreamLatencyTestClientServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLatencyTestClient not implemented")
}
func (UnimplementedNiPerfTestServiceServer) StreamLatencyTestServer(*StreamLatencyClient, NiPerfTestService_StreamLatencyTestServerServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLatencyTestServer not implemented")
}
func (UnimplementedNiPerfTestServiceServer) TestWrite(context.Context, *TestWriteParameters) (*TestWriteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestWrite not implemented")
}
func (UnimplementedNiPerfTestServiceServer) TestWriteContinuously(NiPerfTestService_TestWriteContinuouslyServer) error {
	return status.Errorf(codes.Unimplemented, "method TestWriteContinuously not implemented")
}
func (UnimplementedNiPerfTestServiceServer) BeginTestSidebandStream(context.Context, *BeginTestSidebandStreamRequest) (*BeginTestSidebandStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginTestSidebandStream not implemented")
}
func (UnimplementedNiPerfTestServiceServer) TestSidebandStream(NiPerfTestService_TestSidebandStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TestSidebandStream not implemented")
}
func (UnimplementedNiPerfTestServiceServer) Init(context.Context, *InitParameters) (*InitResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedNiPerfTestServiceServer) ConfigureVertical(context.Context, *ConfigureVerticalRequest) (*ConfigureVerticalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureVertical not implemented")
}
func (UnimplementedNiPerfTestServiceServer) ConfigureHorizontalTiming(context.Context, *ConfigureHorizontalTimingRequest) (*ConfigureHorizontalTimingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureHorizontalTiming not implemented")
}
func (UnimplementedNiPerfTestServiceServer) InitiateAcquisition(context.Context, *InitiateAcquisitionRequest) (*InitiateAcquisitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateAcquisition not implemented")
}
func (UnimplementedNiPerfTestServiceServer) Read(context.Context, *ReadParameters) (*ReadResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedNiPerfTestServiceServer) ReadComplex(context.Context, *ReadParameters) (*ReadComplexResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadComplex not implemented")
}
func (UnimplementedNiPerfTestServiceServer) ReadComplexArena(context.Context, *ReadParameters) (*ReadComplexResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadComplexArena not implemented")
}
func (UnimplementedNiPerfTestServiceServer) ReadContinuously(*ReadContinuouslyParameters, NiPerfTestService_ReadContinuouslyServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadContinuously not implemented")
}
func (UnimplementedNiPerfTestServiceServer) mustEmbedUnimplementedNiPerfTestServiceServer() {}

// UnsafeNiPerfTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NiPerfTestServiceServer will
// result in compilation errors.
type UnsafeNiPerfTestServiceServer interface {
	mustEmbedUnimplementedNiPerfTestServiceServer()
}

func RegisterNiPerfTestServiceServer(s grpc.ServiceRegistrar, srv NiPerfTestServiceServer) {
	s.RegisterService(&NiPerfTestService_ServiceDesc, srv)
}

func _NiPerfTestService_StreamLatencyTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NiPerfTestServiceServer).StreamLatencyTest(&niPerfTestServiceStreamLatencyTestServer{stream})
}

type NiPerfTestService_StreamLatencyTestServer interface {
	Send(*StreamLatencyServer) error
	Recv() (*StreamLatencyClient, error)
	grpc.ServerStream
}

type niPerfTestServiceStreamLatencyTestServer struct {
	grpc.ServerStream
}

func (x *niPerfTestServiceStreamLatencyTestServer) Send(m *StreamLatencyServer) error {
	return x.ServerStream.SendMsg(m)
}

func (x *niPerfTestServiceStreamLatencyTestServer) Recv() (*StreamLatencyClient, error) {
	m := new(StreamLatencyClient)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NiPerfTestService_StreamLatencyTestClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NiPerfTestServiceServer).StreamLatencyTestClient(&niPerfTestServiceStreamLatencyTestClientServer{stream})
}

type NiPerfTestService_StreamLatencyTestClientServer interface {
	SendAndClose(*StreamLatencyServer) error
	Recv() (*StreamLatencyClient, error)
	grpc.ServerStream
}

type niPerfTestServiceStreamLatencyTestClientServer struct {
	grpc.ServerStream
}

func (x *niPerfTestServiceStreamLatencyTestClientServer) SendAndClose(m *StreamLatencyServer) error {
	return x.ServerStream.SendMsg(m)
}

func (x *niPerfTestServiceStreamLatencyTestClientServer) Recv() (*StreamLatencyClient, error) {
	m := new(StreamLatencyClient)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NiPerfTestService_StreamLatencyTestServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamLatencyClient)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NiPerfTestServiceServer).StreamLatencyTestServer(m, &niPerfTestServiceStreamLatencyTestServerServer{stream})
}

type NiPerfTestService_StreamLatencyTestServerServer interface {
	Send(*StreamLatencyServer) error
	grpc.ServerStream
}

type niPerfTestServiceStreamLatencyTestServerServer struct {
	grpc.ServerStream
}

func (x *niPerfTestServiceStreamLatencyTestServerServer) Send(m *StreamLatencyServer) error {
	return x.ServerStream.SendMsg(m)
}

func _NiPerfTestService_TestWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestWriteParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NiPerfTestServiceServer).TestWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/niPerfTest.niPerfTestService/TestWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NiPerfTestServiceServer).TestWrite(ctx, req.(*TestWriteParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _NiPerfTestService_TestWriteContinuously_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NiPerfTestServiceServer).TestWriteContinuously(&niPerfTestServiceTestWriteContinuouslyServer{stream})
}

type NiPerfTestService_TestWriteContinuouslyServer interface {
	Send(*TestWriteResult) error
	Recv() (*TestWriteParameters, error)
	grpc.ServerStream
}

type niPerfTestServiceTestWriteContinuouslyServer struct {
	grpc.ServerStream
}

func (x *niPerfTestServiceTestWriteContinuouslyServer) Send(m *TestWriteResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *niPerfTestServiceTestWriteContinuouslyServer) Recv() (*TestWriteParameters, error) {
	m := new(TestWriteParameters)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NiPerfTestService_BeginTestSidebandStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginTestSidebandStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NiPerfTestServiceServer).BeginTestSidebandStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/niPerfTest.niPerfTestService/BeginTestSidebandStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NiPerfTestServiceServer).BeginTestSidebandStream(ctx, req.(*BeginTestSidebandStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NiPerfTestService_TestSidebandStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NiPerfTestServiceServer).TestSidebandStream(&niPerfTestServiceTestSidebandStreamServer{stream})
}

type NiPerfTestService_TestSidebandStreamServer interface {
	Send(*TestSidebandStreamResponse) error
	Recv() (*TestSidebandStreamRequest, error)
	grpc.ServerStream
}

type niPerfTestServiceTestSidebandStreamServer struct {
	grpc.ServerStream
}

func (x *niPerfTestServiceTestSidebandStreamServer) Send(m *TestSidebandStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *niPerfTestServiceTestSidebandStreamServer) Recv() (*TestSidebandStreamRequest, error) {
	m := new(TestSidebandStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NiPerfTestService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NiPerfTestServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/niPerfTest.niPerfTestService/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NiPerfTestServiceServer).Init(ctx, req.(*InitParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _NiPerfTestService_ConfigureVertical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureVerticalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NiPerfTestServiceServer).ConfigureVertical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/niPerfTest.niPerfTestService/ConfigureVertical",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NiPerfTestServiceServer).ConfigureVertical(ctx, req.(*ConfigureVerticalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NiPerfTestService_ConfigureHorizontalTiming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureHorizontalTimingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NiPerfTestServiceServer).ConfigureHorizontalTiming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/niPerfTest.niPerfTestService/ConfigureHorizontalTiming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NiPerfTestServiceServer).ConfigureHorizontalTiming(ctx, req.(*ConfigureHorizontalTimingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NiPerfTestService_InitiateAcquisition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateAcquisitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NiPerfTestServiceServer).InitiateAcquisition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/niPerfTest.niPerfTestService/InitiateAcquisition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NiPerfTestServiceServer).InitiateAcquisition(ctx, req.(*InitiateAcquisitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NiPerfTestService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NiPerfTestServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/niPerfTest.niPerfTestService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NiPerfTestServiceServer).Read(ctx, req.(*ReadParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _NiPerfTestService_ReadComplex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NiPerfTestServiceServer).ReadComplex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/niPerfTest.niPerfTestService/ReadComplex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NiPerfTestServiceServer).ReadComplex(ctx, req.(*ReadParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _NiPerfTestService_ReadComplexArena_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NiPerfTestServiceServer).ReadComplexArena(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/niPerfTest.niPerfTestService/ReadComplexArena",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NiPerfTestServiceServer).ReadComplexArena(ctx, req.(*ReadParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _NiPerfTestService_ReadContinuously_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadContinuouslyParameters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NiPerfTestServiceServer).ReadContinuously(m, &niPerfTestServiceReadContinuouslyServer{stream})
}

type NiPerfTestService_ReadContinuouslyServer interface {
	Send(*ReadContinuouslyResult) error
	grpc.ServerStream
}

type niPerfTestServiceReadContinuouslyServer struct {
	grpc.ServerStream
}

func (x *niPerfTestServiceReadContinuouslyServer) Send(m *ReadContinuouslyResult) error {
	return x.ServerStream.SendMsg(m)
}

// NiPerfTestService_ServiceDesc is the grpc.ServiceDesc for NiPerfTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NiPerfTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "niPerfTest.niPerfTestService",
	HandlerType: (*NiPerfTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestWrite",
			Handler:    _NiPerfTestService_TestWrite_Handler,
		},
		{
			MethodName: "BeginTestSidebandStream",
			Handler:    _NiPerfTestService_BeginTestSidebandStream_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _NiPerfTestService_Init_Handler,
		},
		{
			MethodName: "ConfigureVertical",
			Handler:    _NiPerfTestService_ConfigureVertical_Handler,
		},
		{
			MethodName: "ConfigureHorizontalTiming",
			Handler:    _NiPerfTestService_ConfigureHorizontalTiming_Handler,
		},
		{
			MethodName: "InitiateAcquisition",
			Handler:    _NiPerfTestService_InitiateAcquisition_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _NiPerfTestService_Read_Handler,
		},
		{
			MethodName: "ReadComplex",
			Handler:    _NiPerfTestService_ReadComplex_Handler,
		},
		{
			MethodName: "ReadComplexArena",
			Handler:    _NiPerfTestService_ReadComplexArena_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLatencyTest",
			Handler:       _NiPerfTestService_StreamLatencyTest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamLatencyTestClient",
			Handler:       _NiPerfTestService_StreamLatencyTestClient_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamLatencyTestServer",
			Handler:       _NiPerfTestService_StreamLatencyTestServer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TestWriteContinuously",
			Handler:       _NiPerfTestService_TestWriteContinuously_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TestSidebandStream",
			Handler:       _NiPerfTestService_TestSidebandStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadContinuously",
			Handler:       _NiPerfTestService_ReadContinuously_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "perftest.proto",
}
