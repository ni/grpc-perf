//---------------------------------------------------------------------
//---------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: perftest.proto

//---------------------------------------------------------------------
//---------------------------------------------------------------------

package perftest

import (
	_ "github.com/golang/protobuf/ptypes/any"
	datamoniker "github.com/ni/grpc-perf/go/pkg/datamoniker"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VerticalCoupling int32

const (
	VerticalCoupling_VERTICAL_COUPLING_UNSPECIFIED     VerticalCoupling = 0
	VerticalCoupling_VERTICAL_COUPLING_NISCOPE_VAL_AC  VerticalCoupling = 0
	VerticalCoupling_VERTICAL_COUPLING_NISCOPE_VAL_DC  VerticalCoupling = 1
	VerticalCoupling_VERTICAL_COUPLING_NISCOPE_VAL_GND VerticalCoupling = 2
)

// Enum value maps for VerticalCoupling.
var (
	VerticalCoupling_name = map[int32]string{
		0: "VERTICAL_COUPLING_UNSPECIFIED",
		// Duplicate value: 0: "VERTICAL_COUPLING_NISCOPE_VAL_AC",
		1: "VERTICAL_COUPLING_NISCOPE_VAL_DC",
		2: "VERTICAL_COUPLING_NISCOPE_VAL_GND",
	}
	VerticalCoupling_value = map[string]int32{
		"VERTICAL_COUPLING_UNSPECIFIED":     0,
		"VERTICAL_COUPLING_NISCOPE_VAL_AC":  0,
		"VERTICAL_COUPLING_NISCOPE_VAL_DC":  1,
		"VERTICAL_COUPLING_NISCOPE_VAL_GND": 2,
	}
)

func (x VerticalCoupling) Enum() *VerticalCoupling {
	p := new(VerticalCoupling)
	*p = x
	return p
}

func (x VerticalCoupling) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerticalCoupling) Descriptor() protoreflect.EnumDescriptor {
	return file_perftest_proto_enumTypes[0].Descriptor()
}

func (VerticalCoupling) Type() protoreflect.EnumType {
	return &file_perftest_proto_enumTypes[0]
}

func (x VerticalCoupling) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerticalCoupling.Descriptor instead.
func (VerticalCoupling) EnumDescriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{0}
}

type InitiateAcquisitionResponse_StatusCode int32

const (
	InitiateAcquisitionResponse_default InitiateAcquisitionResponse_StatusCode = 0
	InitiateAcquisitionResponse_good    InitiateAcquisitionResponse_StatusCode = 1
	InitiateAcquisitionResponse_bad     InitiateAcquisitionResponse_StatusCode = 2
)

// Enum value maps for InitiateAcquisitionResponse_StatusCode.
var (
	InitiateAcquisitionResponse_StatusCode_name = map[int32]string{
		0: "default",
		1: "good",
		2: "bad",
	}
	InitiateAcquisitionResponse_StatusCode_value = map[string]int32{
		"default": 0,
		"good":    1,
		"bad":     2,
	}
)

func (x InitiateAcquisitionResponse_StatusCode) Enum() *InitiateAcquisitionResponse_StatusCode {
	p := new(InitiateAcquisitionResponse_StatusCode)
	*p = x
	return p
}

func (x InitiateAcquisitionResponse_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InitiateAcquisitionResponse_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_perftest_proto_enumTypes[1].Descriptor()
}

func (InitiateAcquisitionResponse_StatusCode) Type() protoreflect.EnumType {
	return &file_perftest_proto_enumTypes[1]
}

func (x InitiateAcquisitionResponse_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InitiateAcquisitionResponse_StatusCode.Descriptor instead.
func (InitiateAcquisitionResponse_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{26, 0}
}

type BeginTestSidebandStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy   datamoniker.SidebandStrategy `protobuf:"varint,1,opt,name=strategy,proto3,enum=ni.data_monikers.SidebandStrategy" json:"strategy,omitempty"`
	NumSamples int32                        `protobuf:"varint,2,opt,name=num_samples,json=numSamples,proto3" json:"num_samples,omitempty"`
}

func (x *BeginTestSidebandStreamRequest) Reset() {
	*x = BeginTestSidebandStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginTestSidebandStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginTestSidebandStreamRequest) ProtoMessage() {}

func (x *BeginTestSidebandStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginTestSidebandStreamRequest.ProtoReflect.Descriptor instead.
func (*BeginTestSidebandStreamRequest) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{0}
}

func (x *BeginTestSidebandStreamRequest) GetStrategy() datamoniker.SidebandStrategy {
	if x != nil {
		return x.Strategy
	}
	return datamoniker.SidebandStrategy(0)
}

func (x *BeginTestSidebandStreamRequest) GetNumSamples() int32 {
	if x != nil {
		return x.NumSamples
	}
	return 0
}

type BeginTestSidebandStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy           datamoniker.SidebandStrategy `protobuf:"varint,1,opt,name=strategy,proto3,enum=ni.data_monikers.SidebandStrategy" json:"strategy,omitempty"`
	ConnectionUrl      string                       `protobuf:"bytes,2,opt,name=connection_url,json=connectionUrl,proto3" json:"connection_url,omitempty"`
	SidebandIdentifier string                       `protobuf:"bytes,3,opt,name=sideband_identifier,json=sidebandIdentifier,proto3" json:"sideband_identifier,omitempty"`
}

func (x *BeginTestSidebandStreamResponse) Reset() {
	*x = BeginTestSidebandStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginTestSidebandStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginTestSidebandStreamResponse) ProtoMessage() {}

func (x *BeginTestSidebandStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginTestSidebandStreamResponse.ProtoReflect.Descriptor instead.
func (*BeginTestSidebandStreamResponse) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{1}
}

func (x *BeginTestSidebandStreamResponse) GetStrategy() datamoniker.SidebandStrategy {
	if x != nil {
		return x.Strategy
	}
	return datamoniker.SidebandStrategy(0)
}

func (x *BeginTestSidebandStreamResponse) GetConnectionUrl() string {
	if x != nil {
		return x.ConnectionUrl
	}
	return ""
}

func (x *BeginTestSidebandStreamResponse) GetSidebandIdentifier() string {
	if x != nil {
		return x.SidebandIdentifier
	}
	return ""
}

type TestSidebandStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy           datamoniker.SidebandStrategy `protobuf:"varint,1,opt,name=strategy,proto3,enum=ni.data_monikers.SidebandStrategy" json:"strategy,omitempty"`
	SidebandIdentifier string                       `protobuf:"bytes,2,opt,name=sideband_identifier,json=sidebandIdentifier,proto3" json:"sideband_identifier,omitempty"`
	NumSamples         int32                        `protobuf:"varint,3,opt,name=num_samples,json=numSamples,proto3" json:"num_samples,omitempty"`
}

func (x *TestSidebandStreamRequest) Reset() {
	*x = TestSidebandStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSidebandStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSidebandStreamRequest) ProtoMessage() {}

func (x *TestSidebandStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSidebandStreamRequest.ProtoReflect.Descriptor instead.
func (*TestSidebandStreamRequest) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{2}
}

func (x *TestSidebandStreamRequest) GetStrategy() datamoniker.SidebandStrategy {
	if x != nil {
		return x.Strategy
	}
	return datamoniker.SidebandStrategy(0)
}

func (x *TestSidebandStreamRequest) GetSidebandIdentifier() string {
	if x != nil {
		return x.SidebandIdentifier
	}
	return ""
}

func (x *TestSidebandStreamRequest) GetNumSamples() int32 {
	if x != nil {
		return x.NumSamples
	}
	return 0
}

type TestSidebandStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SidebandLocation string `protobuf:"bytes,1,opt,name=sideband_location,json=sidebandLocation,proto3" json:"sideband_location,omitempty"`
}

func (x *TestSidebandStreamResponse) Reset() {
	*x = TestSidebandStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSidebandStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSidebandStreamResponse) ProtoMessage() {}

func (x *TestSidebandStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSidebandStreamResponse.ProtoReflect.Descriptor instead.
func (*TestSidebandStreamResponse) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{3}
}

func (x *TestSidebandStreamResponse) GetSidebandLocation() string {
	if x != nil {
		return x.SidebandLocation
	}
	return ""
}

type StreamLatencyClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message uint32 `protobuf:"varint,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StreamLatencyClient) Reset() {
	*x = StreamLatencyClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamLatencyClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLatencyClient) ProtoMessage() {}

func (x *StreamLatencyClient) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLatencyClient.ProtoReflect.Descriptor instead.
func (*StreamLatencyClient) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{4}
}

func (x *StreamLatencyClient) GetMessage() uint32 {
	if x != nil {
		return x.Message
	}
	return 0
}

type StreamLatencyServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message uint32 `protobuf:"varint,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StreamLatencyServer) Reset() {
	*x = StreamLatencyServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamLatencyServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLatencyServer) ProtoMessage() {}

func (x *StreamLatencyServer) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLatencyServer.ProtoReflect.Descriptor instead.
func (*StreamLatencyServer) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{5}
}

func (x *StreamLatencyServer) GetMessage() uint32 {
	if x != nil {
		return x.Message
	}
	return 0
}

type InitParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Id      int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *InitParameters) Reset() {
	*x = InitParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitParameters) ProtoMessage() {}

func (x *InitParameters) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitParameters.ProtoReflect.Descriptor instead.
func (*InitParameters) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{6}
}

func (x *InitParameters) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *InitParameters) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type InitResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *InitResult) Reset() {
	*x = InitResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitResult) ProtoMessage() {}

func (x *InitResult) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitResult.ProtoReflect.Descriptor instead.
func (*InitResult) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{7}
}

func (x *InitResult) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ReadParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout    float64 `protobuf:"fixed64,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	NumSamples int32   `protobuf:"varint,2,opt,name=num_samples,json=numSamples,proto3" json:"num_samples,omitempty"`
}

func (x *ReadParameters) Reset() {
	*x = ReadParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadParameters) ProtoMessage() {}

func (x *ReadParameters) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadParameters.ProtoReflect.Descriptor instead.
func (*ReadParameters) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{8}
}

func (x *ReadParameters) GetTimeout() float64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ReadParameters) GetNumSamples() int32 {
	if x != nil {
		return x.NumSamples
	}
	return 0
}

type ReadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Samples []float64 `protobuf:"fixed64,2,rep,packed,name=samples,proto3" json:"samples,omitempty"`
}

func (x *ReadResult) Reset() {
	*x = ReadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResult) ProtoMessage() {}

func (x *ReadResult) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResult.ProtoReflect.Descriptor instead.
func (*ReadResult) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{9}
}

func (x *ReadResult) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ReadResult) GetSamples() []float64 {
	if x != nil {
		return x.Samples
	}
	return nil
}

type ComplexNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Real      float64 `protobuf:"fixed64,1,opt,name=real,proto3" json:"real,omitempty"`
	Imaginary float64 `protobuf:"fixed64,2,opt,name=imaginary,proto3" json:"imaginary,omitempty"`
}

func (x *ComplexNumber) Reset() {
	*x = ComplexNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplexNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexNumber) ProtoMessage() {}

func (x *ComplexNumber) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexNumber.ProtoReflect.Descriptor instead.
func (*ComplexNumber) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{10}
}

func (x *ComplexNumber) GetReal() float64 {
	if x != nil {
		return x.Real
	}
	return 0
}

func (x *ComplexNumber) GetImaginary() float64 {
	if x != nil {
		return x.Imaginary
	}
	return 0
}

type ComplexNumberArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealValues      []float64 `protobuf:"fixed64,1,rep,packed,name=real_values,json=realValues,proto3" json:"real_values,omitempty"`
	ImaginaryValues []float64 `protobuf:"fixed64,2,rep,packed,name=imaginary_values,json=imaginaryValues,proto3" json:"imaginary_values,omitempty"`
}

func (x *ComplexNumberArray) Reset() {
	*x = ComplexNumberArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplexNumberArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexNumberArray) ProtoMessage() {}

func (x *ComplexNumberArray) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexNumberArray.ProtoReflect.Descriptor instead.
func (*ComplexNumberArray) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{11}
}

func (x *ComplexNumberArray) GetRealValues() []float64 {
	if x != nil {
		return x.RealValues
	}
	return nil
}

func (x *ComplexNumberArray) GetImaginaryValues() []float64 {
	if x != nil {
		return x.ImaginaryValues
	}
	return nil
}

type LidarValueArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XValues []float64 `protobuf:"fixed64,1,rep,packed,name=x_values,json=xValues,proto3" json:"x_values,omitempty"`
	YValues []float64 `protobuf:"fixed64,2,rep,packed,name=y_values,json=yValues,proto3" json:"y_values,omitempty"`
	ZValues []float64 `protobuf:"fixed64,3,rep,packed,name=z_values,json=zValues,proto3" json:"z_values,omitempty"`
	AValues []float64 `protobuf:"fixed64,4,rep,packed,name=a_values,json=aValues,proto3" json:"a_values,omitempty"`
}

func (x *LidarValueArray) Reset() {
	*x = LidarValueArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LidarValueArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LidarValueArray) ProtoMessage() {}

func (x *LidarValueArray) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LidarValueArray.ProtoReflect.Descriptor instead.
func (*LidarValueArray) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{12}
}

func (x *LidarValueArray) GetXValues() []float64 {
	if x != nil {
		return x.XValues
	}
	return nil
}

func (x *LidarValueArray) GetYValues() []float64 {
	if x != nil {
		return x.YValues
	}
	return nil
}

func (x *LidarValueArray) GetZValues() []float64 {
	if x != nil {
		return x.ZValues
	}
	return nil
}

func (x *LidarValueArray) GetAValues() []float64 {
	if x != nil {
		return x.AValues
	}
	return nil
}

type ReadLidarResult2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32            `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Samples *LidarValueArray `protobuf:"bytes,2,opt,name=samples,proto3" json:"samples,omitempty"`
}

func (x *ReadLidarResult2) Reset() {
	*x = ReadLidarResult2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadLidarResult2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadLidarResult2) ProtoMessage() {}

func (x *ReadLidarResult2) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadLidarResult2.ProtoReflect.Descriptor instead.
func (*ReadLidarResult2) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{13}
}

func (x *ReadLidarResult2) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ReadLidarResult2) GetSamples() *LidarValueArray {
	if x != nil {
		return x.Samples
	}
	return nil
}

type ReadComplexResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32            `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Samples []*ComplexNumber `protobuf:"bytes,2,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *ReadComplexResult) Reset() {
	*x = ReadComplexResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadComplexResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadComplexResult) ProtoMessage() {}

func (x *ReadComplexResult) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadComplexResult.ProtoReflect.Descriptor instead.
func (*ReadComplexResult) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{14}
}

func (x *ReadComplexResult) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ReadComplexResult) GetSamples() []*ComplexNumber {
	if x != nil {
		return x.Samples
	}
	return nil
}

type LidarValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
	A float64 `protobuf:"fixed64,4,opt,name=a,proto3" json:"a,omitempty"`
}

func (x *LidarValue) Reset() {
	*x = LidarValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LidarValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LidarValue) ProtoMessage() {}

func (x *LidarValue) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LidarValue.ProtoReflect.Descriptor instead.
func (*LidarValue) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{15}
}

func (x *LidarValue) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *LidarValue) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *LidarValue) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *LidarValue) GetA() float64 {
	if x != nil {
		return x.A
	}
	return 0
}

type ReadLidarResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32         `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Samples []*LidarValue `protobuf:"bytes,2,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *ReadLidarResult) Reset() {
	*x = ReadLidarResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadLidarResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadLidarResult) ProtoMessage() {}

func (x *ReadLidarResult) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadLidarResult.ProtoReflect.Descriptor instead.
func (*ReadLidarResult) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{16}
}

func (x *ReadLidarResult) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ReadLidarResult) GetSamples() []*LidarValue {
	if x != nil {
		return x.Samples
	}
	return nil
}

type ReadComplexResult2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32               `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Samples *ComplexNumberArray `protobuf:"bytes,2,opt,name=samples,proto3" json:"samples,omitempty"`
}

func (x *ReadComplexResult2) Reset() {
	*x = ReadComplexResult2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadComplexResult2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadComplexResult2) ProtoMessage() {}

func (x *ReadComplexResult2) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadComplexResult2.ProtoReflect.Descriptor instead.
func (*ReadComplexResult2) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{17}
}

func (x *ReadComplexResult2) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ReadComplexResult2) GetSamples() *ComplexNumberArray {
	if x != nil {
		return x.Samples
	}
	return nil
}

type TestWriteParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Samples []float64 `protobuf:"fixed64,2,rep,packed,name=samples,proto3" json:"samples,omitempty"`
}

func (x *TestWriteParameters) Reset() {
	*x = TestWriteParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestWriteParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestWriteParameters) ProtoMessage() {}

func (x *TestWriteParameters) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestWriteParameters.ProtoReflect.Descriptor instead.
func (*TestWriteParameters) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{18}
}

func (x *TestWriteParameters) GetSamples() []float64 {
	if x != nil {
		return x.Samples
	}
	return nil
}

type TestWriteResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TestWriteResult) Reset() {
	*x = TestWriteResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestWriteResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestWriteResult) ProtoMessage() {}

func (x *TestWriteResult) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestWriteResult.ProtoReflect.Descriptor instead.
func (*TestWriteResult) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{19}
}

func (x *TestWriteResult) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ReadContinuouslyParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumIterations int32 `protobuf:"varint,1,opt,name=num_iterations,json=numIterations,proto3" json:"num_iterations,omitempty"`
	NumSamples    int32 `protobuf:"varint,2,opt,name=num_samples,json=numSamples,proto3" json:"num_samples,omitempty"`
}

func (x *ReadContinuouslyParameters) Reset() {
	*x = ReadContinuouslyParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadContinuouslyParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadContinuouslyParameters) ProtoMessage() {}

func (x *ReadContinuouslyParameters) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadContinuouslyParameters.ProtoReflect.Descriptor instead.
func (*ReadContinuouslyParameters) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{20}
}

func (x *ReadContinuouslyParameters) GetNumIterations() int32 {
	if x != nil {
		return x.NumIterations
	}
	return 0
}

func (x *ReadContinuouslyParameters) GetNumSamples() int32 {
	if x != nil {
		return x.NumSamples
	}
	return 0
}

type ReadContinuouslyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Wfm    []float64 `protobuf:"fixed64,2,rep,packed,name=wfm,proto3" json:"wfm,omitempty"`
}

func (x *ReadContinuouslyResult) Reset() {
	*x = ReadContinuouslyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadContinuouslyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadContinuouslyResult) ProtoMessage() {}

func (x *ReadContinuouslyResult) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadContinuouslyResult.ProtoReflect.Descriptor instead.
func (*ReadContinuouslyResult) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{21}
}

func (x *ReadContinuouslyResult) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ReadContinuouslyResult) GetWfm() []float64 {
	if x != nil {
		return x.Wfm
	}
	return nil
}

type ConfigureHorizontalTimingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vi              string  `protobuf:"bytes,1,opt,name=vi,proto3" json:"vi,omitempty"`
	MinSampleRate   float64 `protobuf:"fixed64,2,opt,name=min_sample_rate,json=minSampleRate,proto3" json:"min_sample_rate,omitempty"`
	MinNumPts       int32   `protobuf:"zigzag32,3,opt,name=min_num_pts,json=minNumPts,proto3" json:"min_num_pts,omitempty"`
	RefPosition     float64 `protobuf:"fixed64,4,opt,name=ref_position,json=refPosition,proto3" json:"ref_position,omitempty"`
	NumRecords      int32   `protobuf:"zigzag32,5,opt,name=num_records,json=numRecords,proto3" json:"num_records,omitempty"`
	EnforceRealtime bool    `protobuf:"varint,6,opt,name=enforce_realtime,json=enforceRealtime,proto3" json:"enforce_realtime,omitempty"`
}

func (x *ConfigureHorizontalTimingRequest) Reset() {
	*x = ConfigureHorizontalTimingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureHorizontalTimingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureHorizontalTimingRequest) ProtoMessage() {}

func (x *ConfigureHorizontalTimingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureHorizontalTimingRequest.ProtoReflect.Descriptor instead.
func (*ConfigureHorizontalTimingRequest) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{22}
}

func (x *ConfigureHorizontalTimingRequest) GetVi() string {
	if x != nil {
		return x.Vi
	}
	return ""
}

func (x *ConfigureHorizontalTimingRequest) GetMinSampleRate() float64 {
	if x != nil {
		return x.MinSampleRate
	}
	return 0
}

func (x *ConfigureHorizontalTimingRequest) GetMinNumPts() int32 {
	if x != nil {
		return x.MinNumPts
	}
	return 0
}

func (x *ConfigureHorizontalTimingRequest) GetRefPosition() float64 {
	if x != nil {
		return x.RefPosition
	}
	return 0
}

func (x *ConfigureHorizontalTimingRequest) GetNumRecords() int32 {
	if x != nil {
		return x.NumRecords
	}
	return 0
}

func (x *ConfigureHorizontalTimingRequest) GetEnforceRealtime() bool {
	if x != nil {
		return x.EnforceRealtime
	}
	return false
}

type ConfigureHorizontalTimingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ConfigureHorizontalTimingResponse) Reset() {
	*x = ConfigureHorizontalTimingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureHorizontalTimingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureHorizontalTimingResponse) ProtoMessage() {}

func (x *ConfigureHorizontalTimingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureHorizontalTimingResponse.ProtoReflect.Descriptor instead.
func (*ConfigureHorizontalTimingResponse) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{23}
}

func (x *ConfigureHorizontalTimingResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ConfigureVerticalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vi          string  `protobuf:"bytes,1,opt,name=vi,proto3" json:"vi,omitempty"`
	ChannelList string  `protobuf:"bytes,2,opt,name=channel_list,json=channelList,proto3" json:"channel_list,omitempty"`
	Range       float64 `protobuf:"fixed64,3,opt,name=range,proto3" json:"range,omitempty"`
	Offset      float64 `protobuf:"fixed64,4,opt,name=offset,proto3" json:"offset,omitempty"`
	// Types that are assignable to CouplingEnum:
	//	*ConfigureVerticalRequest_Coupling
	//	*ConfigureVerticalRequest_CouplingRaw
	CouplingEnum     isConfigureVerticalRequest_CouplingEnum `protobuf_oneof:"coupling_enum"`
	ProbeAttenuation float64                                 `protobuf:"fixed64,7,opt,name=probe_attenuation,json=probeAttenuation,proto3" json:"probe_attenuation,omitempty"`
	Enabled          bool                                    `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *ConfigureVerticalRequest) Reset() {
	*x = ConfigureVerticalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureVerticalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureVerticalRequest) ProtoMessage() {}

func (x *ConfigureVerticalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureVerticalRequest.ProtoReflect.Descriptor instead.
func (*ConfigureVerticalRequest) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{24}
}

func (x *ConfigureVerticalRequest) GetVi() string {
	if x != nil {
		return x.Vi
	}
	return ""
}

func (x *ConfigureVerticalRequest) GetChannelList() string {
	if x != nil {
		return x.ChannelList
	}
	return ""
}

func (x *ConfigureVerticalRequest) GetRange() float64 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *ConfigureVerticalRequest) GetOffset() float64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (m *ConfigureVerticalRequest) GetCouplingEnum() isConfigureVerticalRequest_CouplingEnum {
	if m != nil {
		return m.CouplingEnum
	}
	return nil
}

func (x *ConfigureVerticalRequest) GetCoupling() VerticalCoupling {
	if x, ok := x.GetCouplingEnum().(*ConfigureVerticalRequest_Coupling); ok {
		return x.Coupling
	}
	return VerticalCoupling_VERTICAL_COUPLING_UNSPECIFIED
}

func (x *ConfigureVerticalRequest) GetCouplingRaw() int32 {
	if x, ok := x.GetCouplingEnum().(*ConfigureVerticalRequest_CouplingRaw); ok {
		return x.CouplingRaw
	}
	return 0
}

func (x *ConfigureVerticalRequest) GetProbeAttenuation() float64 {
	if x != nil {
		return x.ProbeAttenuation
	}
	return 0
}

func (x *ConfigureVerticalRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type isConfigureVerticalRequest_CouplingEnum interface {
	isConfigureVerticalRequest_CouplingEnum()
}

type ConfigureVerticalRequest_Coupling struct {
	Coupling VerticalCoupling `protobuf:"varint,5,opt,name=coupling,proto3,enum=niPerfTest.VerticalCoupling,oneof"`
}

type ConfigureVerticalRequest_CouplingRaw struct {
	CouplingRaw int32 `protobuf:"zigzag32,6,opt,name=coupling_raw,json=couplingRaw,proto3,oneof"`
}

func (*ConfigureVerticalRequest_Coupling) isConfigureVerticalRequest_CouplingEnum() {}

func (*ConfigureVerticalRequest_CouplingRaw) isConfigureVerticalRequest_CouplingEnum() {}

type ConfigureVerticalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ConfigureVerticalResponse) Reset() {
	*x = ConfigureVerticalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureVerticalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureVerticalResponse) ProtoMessage() {}

func (x *ConfigureVerticalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureVerticalResponse.ProtoReflect.Descriptor instead.
func (*ConfigureVerticalResponse) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{25}
}

func (x *ConfigureVerticalResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type InitiateAcquisitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *InitiateAcquisitionResponse) Reset() {
	*x = InitiateAcquisitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiateAcquisitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateAcquisitionResponse) ProtoMessage() {}

func (x *InitiateAcquisitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateAcquisitionResponse.ProtoReflect.Descriptor instead.
func (*InitiateAcquisitionResponse) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{26}
}

func (x *InitiateAcquisitionResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type InitiateAcquisitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vi   string                                 `protobuf:"bytes,1,opt,name=vi,proto3" json:"vi,omitempty"`
	Code InitiateAcquisitionResponse_StatusCode `protobuf:"varint,2,opt,name=code,proto3,enum=niPerfTest.InitiateAcquisitionResponse_StatusCode" json:"code,omitempty"`
}

func (x *InitiateAcquisitionRequest) Reset() {
	*x = InitiateAcquisitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perftest_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiateAcquisitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateAcquisitionRequest) ProtoMessage() {}

func (x *InitiateAcquisitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perftest_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateAcquisitionRequest.ProtoReflect.Descriptor instead.
func (*InitiateAcquisitionRequest) Descriptor() ([]byte, []int) {
	return file_perftest_proto_rawDescGZIP(), []int{27}
}

func (x *InitiateAcquisitionRequest) GetVi() string {
	if x != nil {
		return x.Vi
	}
	return ""
}

func (x *InitiateAcquisitionRequest) GetCode() InitiateAcquisitionResponse_StatusCode {
	if x != nil {
		return x.Code
	}
	return InitiateAcquisitionResponse_default
}

var File_perftest_proto protoreflect.FileDescriptor

var file_perftest_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x65, 0x72, 0x66, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x1e,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x6e,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x6e, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x6b,
	0x65, 0x72, 0x73, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22,
	0xb9, 0x01, 0x0a, 0x1f, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x64,
	0x65, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6e, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x6e,
	0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x69,
	0x64, 0x65, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x69, 0x64, 0x65, 0x62, 0x61, 0x6e,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xad, 0x01, 0x0a, 0x19,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6e, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x53,
	0x69, 0x64, 0x65, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x69, 0x64,
	0x65, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x69, 0x64, 0x65, 0x62, 0x61, 0x6e, 0x64,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75,
	0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6e, 0x75, 0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x1a, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x69, 0x64,
	0x65, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x69, 0x64, 0x65, 0x62, 0x61, 0x6e, 0x64, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x0a, 0x0e, 0x49, 0x6e, 0x69, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4b, 0x0a, 0x0e, 0x52, 0x65,
	0x61, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x3e, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x07,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x65, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x22, 0x60, 0x0a, 0x12, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0f, 0x69, 0x6d, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x7d, 0x0a, 0x0f,
	0x4c, 0x69, 0x64, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x07, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x79, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x07, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x07, 0x7a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x01, 0x52, 0x07, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x10, 0x52,
	0x65, 0x61, 0x64, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72,
	0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x60,
	0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e,
	0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x22, 0x44, 0x0a, 0x0a, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x61, 0x22, 0x5b, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x69,
	0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e,
	0x4c, 0x69, 0x64, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x13, 0x54,
	0x65, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x0f,
	0x54, 0x65, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x64, 0x0a, 0x1a, 0x52, 0x65, 0x61, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e,
	0x75, 0x6d, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x42, 0x0a,
	0x16, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x6c,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x77, 0x66, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x03, 0x77, 0x66,
	0x6d, 0x22, 0xe9, 0x01, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x48,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x76, 0x69, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x6d, 0x69, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x50, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x66, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3b, 0x0a,
	0x21, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb4, 0x02, 0x0a, 0x18, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x76, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6e, 0x69, 0x50,
	0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x77, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x22, 0x33, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x63, 0x0a, 0x1b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2c, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x6f, 0x6f, 0x64,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x61, 0x64, 0x10, 0x02, 0x22, 0x74, 0x0a, 0x1a, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x76, 0x69, 0x12, 0x46, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66,
	0x54, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x41, 0x63, 0x71,
	0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x2a, 0xac, 0x01, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x56, 0x45, 0x52,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4e,
	0x49, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x20, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x55, 0x50,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x49, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x4c,
	0x5f, 0x44, 0x43, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x49, 0x53, 0x43, 0x4f,
	0x50, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x5f, 0x47, 0x4e, 0x44, 0x10, 0x02, 0x1a, 0x02, 0x10, 0x01,
	0x32, 0xfe, 0x0a, 0x0a, 0x11, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x6e, 0x69,
	0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x1f, 0x2e, 0x6e,
	0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x5f, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1f,
	0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a,
	0x1f, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x22, 0x00, 0x28, 0x01, 0x12, 0x5f, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x1f, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x1a, 0x1f, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x1f, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x1a, 0x1b, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x12, 0x1f, 0x2e, 0x6e, 0x69,
	0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1b, 0x2e, 0x6e,
	0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x74, 0x0a, 0x17, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x64, 0x65,
	0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2a, 0x2e, 0x6e, 0x69, 0x50,
	0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54,
	0x65, 0x73, 0x74, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x64,
	0x65, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x64,
	0x65, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x25, 0x2e, 0x6e, 0x69,
	0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x64,
	0x65, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72,
	0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0x16, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x60,
	0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x12, 0x24, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x69, 0x50, 0x65,
	0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x78, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x48, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x2e,
	0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x69,
	0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6e, 0x69, 0x50, 0x65,
	0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1a, 0x2e, 0x6e, 0x69, 0x50,
	0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x16, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x4a, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x12,
	0x1a, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1d, 0x2e, 0x6e, 0x69,
	0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x41, 0x72, 0x65, 0x6e, 0x61,
	0x12, 0x1a, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1d, 0x2e, 0x6e,
	0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x62, 0x0a,
	0x10, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x6c,
	0x79, 0x12, 0x26, 0x2e, 0x6e, 0x69, 0x50, 0x65, 0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x22, 0x2e, 0x6e, 0x69, 0x50, 0x65,
	0x72, 0x66, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x30,
	0x01, 0x42, 0x03, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_perftest_proto_rawDescOnce sync.Once
	file_perftest_proto_rawDescData = file_perftest_proto_rawDesc
)

func file_perftest_proto_rawDescGZIP() []byte {
	file_perftest_proto_rawDescOnce.Do(func() {
		file_perftest_proto_rawDescData = protoimpl.X.CompressGZIP(file_perftest_proto_rawDescData)
	})
	return file_perftest_proto_rawDescData
}

var file_perftest_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_perftest_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_perftest_proto_goTypes = []interface{}{
	(VerticalCoupling)(0),                       // 0: niPerfTest.VerticalCoupling
	(InitiateAcquisitionResponse_StatusCode)(0), // 1: niPerfTest.InitiateAcquisitionResponse.StatusCode
	(*BeginTestSidebandStreamRequest)(nil),      // 2: niPerfTest.BeginTestSidebandStreamRequest
	(*BeginTestSidebandStreamResponse)(nil),     // 3: niPerfTest.BeginTestSidebandStreamResponse
	(*TestSidebandStreamRequest)(nil),           // 4: niPerfTest.TestSidebandStreamRequest
	(*TestSidebandStreamResponse)(nil),          // 5: niPerfTest.TestSidebandStreamResponse
	(*StreamLatencyClient)(nil),                 // 6: niPerfTest.StreamLatencyClient
	(*StreamLatencyServer)(nil),                 // 7: niPerfTest.StreamLatencyServer
	(*InitParameters)(nil),                      // 8: niPerfTest.InitParameters
	(*InitResult)(nil),                          // 9: niPerfTest.InitResult
	(*ReadParameters)(nil),                      // 10: niPerfTest.ReadParameters
	(*ReadResult)(nil),                          // 11: niPerfTest.ReadResult
	(*ComplexNumber)(nil),                       // 12: niPerfTest.ComplexNumber
	(*ComplexNumberArray)(nil),                  // 13: niPerfTest.ComplexNumberArray
	(*LidarValueArray)(nil),                     // 14: niPerfTest.LidarValueArray
	(*ReadLidarResult2)(nil),                    // 15: niPerfTest.ReadLidarResult2
	(*ReadComplexResult)(nil),                   // 16: niPerfTest.ReadComplexResult
	(*LidarValue)(nil),                          // 17: niPerfTest.LidarValue
	(*ReadLidarResult)(nil),                     // 18: niPerfTest.ReadLidarResult
	(*ReadComplexResult2)(nil),                  // 19: niPerfTest.ReadComplexResult2
	(*TestWriteParameters)(nil),                 // 20: niPerfTest.TestWriteParameters
	(*TestWriteResult)(nil),                     // 21: niPerfTest.TestWriteResult
	(*ReadContinuouslyParameters)(nil),          // 22: niPerfTest.ReadContinuouslyParameters
	(*ReadContinuouslyResult)(nil),              // 23: niPerfTest.ReadContinuouslyResult
	(*ConfigureHorizontalTimingRequest)(nil),    // 24: niPerfTest.ConfigureHorizontalTimingRequest
	(*ConfigureHorizontalTimingResponse)(nil),   // 25: niPerfTest.ConfigureHorizontalTimingResponse
	(*ConfigureVerticalRequest)(nil),            // 26: niPerfTest.ConfigureVerticalRequest
	(*ConfigureVerticalResponse)(nil),           // 27: niPerfTest.ConfigureVerticalResponse
	(*InitiateAcquisitionResponse)(nil),         // 28: niPerfTest.InitiateAcquisitionResponse
	(*InitiateAcquisitionRequest)(nil),          // 29: niPerfTest.InitiateAcquisitionRequest
	(datamoniker.SidebandStrategy)(0),           // 30: ni.data_monikers.SidebandStrategy
}
var file_perftest_proto_depIdxs = []int32{
	30, // 0: niPerfTest.BeginTestSidebandStreamRequest.strategy:type_name -> ni.data_monikers.SidebandStrategy
	30, // 1: niPerfTest.BeginTestSidebandStreamResponse.strategy:type_name -> ni.data_monikers.SidebandStrategy
	30, // 2: niPerfTest.TestSidebandStreamRequest.strategy:type_name -> ni.data_monikers.SidebandStrategy
	14, // 3: niPerfTest.ReadLidarResult2.samples:type_name -> niPerfTest.LidarValueArray
	12, // 4: niPerfTest.ReadComplexResult.samples:type_name -> niPerfTest.ComplexNumber
	17, // 5: niPerfTest.ReadLidarResult.samples:type_name -> niPerfTest.LidarValue
	13, // 6: niPerfTest.ReadComplexResult2.samples:type_name -> niPerfTest.ComplexNumberArray
	0,  // 7: niPerfTest.ConfigureVerticalRequest.coupling:type_name -> niPerfTest.VerticalCoupling
	1,  // 8: niPerfTest.InitiateAcquisitionRequest.code:type_name -> niPerfTest.InitiateAcquisitionResponse.StatusCode
	6,  // 9: niPerfTest.niPerfTestService.StreamLatencyTest:input_type -> niPerfTest.StreamLatencyClient
	6,  // 10: niPerfTest.niPerfTestService.StreamLatencyTestClient:input_type -> niPerfTest.StreamLatencyClient
	6,  // 11: niPerfTest.niPerfTestService.StreamLatencyTestServer:input_type -> niPerfTest.StreamLatencyClient
	20, // 12: niPerfTest.niPerfTestService.TestWrite:input_type -> niPerfTest.TestWriteParameters
	20, // 13: niPerfTest.niPerfTestService.TestWriteContinuously:input_type -> niPerfTest.TestWriteParameters
	2,  // 14: niPerfTest.niPerfTestService.BeginTestSidebandStream:input_type -> niPerfTest.BeginTestSidebandStreamRequest
	4,  // 15: niPerfTest.niPerfTestService.TestSidebandStream:input_type -> niPerfTest.TestSidebandStreamRequest
	8,  // 16: niPerfTest.niPerfTestService.Init:input_type -> niPerfTest.InitParameters
	26, // 17: niPerfTest.niPerfTestService.ConfigureVertical:input_type -> niPerfTest.ConfigureVerticalRequest
	24, // 18: niPerfTest.niPerfTestService.ConfigureHorizontalTiming:input_type -> niPerfTest.ConfigureHorizontalTimingRequest
	29, // 19: niPerfTest.niPerfTestService.InitiateAcquisition:input_type -> niPerfTest.InitiateAcquisitionRequest
	10, // 20: niPerfTest.niPerfTestService.Read:input_type -> niPerfTest.ReadParameters
	10, // 21: niPerfTest.niPerfTestService.ReadComplex:input_type -> niPerfTest.ReadParameters
	10, // 22: niPerfTest.niPerfTestService.ReadComplexArena:input_type -> niPerfTest.ReadParameters
	22, // 23: niPerfTest.niPerfTestService.ReadContinuously:input_type -> niPerfTest.ReadContinuouslyParameters
	7,  // 24: niPerfTest.niPerfTestService.StreamLatencyTest:output_type -> niPerfTest.StreamLatencyServer
	7,  // 25: niPerfTest.niPerfTestService.StreamLatencyTestClient:output_type -> niPerfTest.StreamLatencyServer
	7,  // 26: niPerfTest.niPerfTestService.StreamLatencyTestServer:output_type -> niPerfTest.StreamLatencyServer
	21, // 27: niPerfTest.niPerfTestService.TestWrite:output_type -> niPerfTest.TestWriteResult
	21, // 28: niPerfTest.niPerfTestService.TestWriteContinuously:output_type -> niPerfTest.TestWriteResult
	3,  // 29: niPerfTest.niPerfTestService.BeginTestSidebandStream:output_type -> niPerfTest.BeginTestSidebandStreamResponse
	5,  // 30: niPerfTest.niPerfTestService.TestSidebandStream:output_type -> niPerfTest.TestSidebandStreamResponse
	9,  // 31: niPerfTest.niPerfTestService.Init:output_type -> niPerfTest.InitResult
	27, // 32: niPerfTest.niPerfTestService.ConfigureVertical:output_type -> niPerfTest.ConfigureVerticalResponse
	25, // 33: niPerfTest.niPerfTestService.ConfigureHorizontalTiming:output_type -> niPerfTest.ConfigureHorizontalTimingResponse
	28, // 34: niPerfTest.niPerfTestService.InitiateAcquisition:output_type -> niPerfTest.InitiateAcquisitionResponse
	11, // 35: niPerfTest.niPerfTestService.Read:output_type -> niPerfTest.ReadResult
	16, // 36: niPerfTest.niPerfTestService.ReadComplex:output_type -> niPerfTest.ReadComplexResult
	16, // 37: niPerfTest.niPerfTestService.ReadComplexArena:output_type -> niPerfTest.ReadComplexResult
	23, // 38: niPerfTest.niPerfTestService.ReadContinuously:output_type -> niPerfTest.ReadContinuouslyResult
	24, // [24:39] is the sub-list for method output_type
	9,  // [9:24] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_perftest_proto_init() }
func file_perftest_proto_init() {
	if File_perftest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_perftest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginTestSidebandStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginTestSidebandStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSidebandStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSidebandStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamLatencyClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamLatencyServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplexNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplexNumberArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LidarValueArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadLidarResult2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadComplexResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LidarValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadLidarResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadComplexResult2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestWriteParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestWriteResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadContinuouslyParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadContinuouslyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureHorizontalTimingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureHorizontalTimingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureVerticalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureVerticalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiateAcquisitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perftest_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiateAcquisitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_perftest_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*ConfigureVerticalRequest_Coupling)(nil),
		(*ConfigureVerticalRequest_CouplingRaw)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_perftest_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_perftest_proto_goTypes,
		DependencyIndexes: file_perftest_proto_depIdxs,
		EnumInfos:         file_perftest_proto_enumTypes,
		MessageInfos:      file_perftest_proto_msgTypes,
	}.Build()
	File_perftest_proto = out.File
	file_perftest_proto_rawDesc = nil
	file_perftest_proto_goTypes = nil
	file_perftest_proto_depIdxs = nil
}
