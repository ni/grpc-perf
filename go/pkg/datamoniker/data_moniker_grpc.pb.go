// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: data_moniker.proto

package datamoniker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MonikerServiceClient is the client API for MonikerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonikerServiceClient interface {
	BeginSidebandStream(ctx context.Context, in *BeginMonikerSidebandStreamRequest, opts ...grpc.CallOption) (*BeginMonikerSidebandStreamResponse, error)
	StreamReadWrite(ctx context.Context, opts ...grpc.CallOption) (MonikerService_StreamReadWriteClient, error)
	StreamRead(ctx context.Context, in *MonikerList, opts ...grpc.CallOption) (MonikerService_StreamReadClient, error)
	StreamWrite(ctx context.Context, opts ...grpc.CallOption) (MonikerService_StreamWriteClient, error)
}

type monikerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonikerServiceClient(cc grpc.ClientConnInterface) MonikerServiceClient {
	return &monikerServiceClient{cc}
}

func (c *monikerServiceClient) BeginSidebandStream(ctx context.Context, in *BeginMonikerSidebandStreamRequest, opts ...grpc.CallOption) (*BeginMonikerSidebandStreamResponse, error) {
	out := new(BeginMonikerSidebandStreamResponse)
	err := c.cc.Invoke(ctx, "/ni.data_monikers.MonikerService/BeginSidebandStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monikerServiceClient) StreamReadWrite(ctx context.Context, opts ...grpc.CallOption) (MonikerService_StreamReadWriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &MonikerService_ServiceDesc.Streams[0], "/ni.data_monikers.MonikerService/StreamReadWrite", opts...)
	if err != nil {
		return nil, err
	}
	x := &monikerServiceStreamReadWriteClient{stream}
	return x, nil
}

type MonikerService_StreamReadWriteClient interface {
	Send(*MonikerWriteRequest) error
	Recv() (*MonikerReadResult, error)
	grpc.ClientStream
}

type monikerServiceStreamReadWriteClient struct {
	grpc.ClientStream
}

func (x *monikerServiceStreamReadWriteClient) Send(m *MonikerWriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monikerServiceStreamReadWriteClient) Recv() (*MonikerReadResult, error) {
	m := new(MonikerReadResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monikerServiceClient) StreamRead(ctx context.Context, in *MonikerList, opts ...grpc.CallOption) (MonikerService_StreamReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &MonikerService_ServiceDesc.Streams[1], "/ni.data_monikers.MonikerService/StreamRead", opts...)
	if err != nil {
		return nil, err
	}
	x := &monikerServiceStreamReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonikerService_StreamReadClient interface {
	Recv() (*MonikerReadResult, error)
	grpc.ClientStream
}

type monikerServiceStreamReadClient struct {
	grpc.ClientStream
}

func (x *monikerServiceStreamReadClient) Recv() (*MonikerReadResult, error) {
	m := new(MonikerReadResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monikerServiceClient) StreamWrite(ctx context.Context, opts ...grpc.CallOption) (MonikerService_StreamWriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &MonikerService_ServiceDesc.Streams[2], "/ni.data_monikers.MonikerService/StreamWrite", opts...)
	if err != nil {
		return nil, err
	}
	x := &monikerServiceStreamWriteClient{stream}
	return x, nil
}

type MonikerService_StreamWriteClient interface {
	Send(*MonikerWriteRequest) error
	Recv() (*StreamWriteResponse, error)
	grpc.ClientStream
}

type monikerServiceStreamWriteClient struct {
	grpc.ClientStream
}

func (x *monikerServiceStreamWriteClient) Send(m *MonikerWriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monikerServiceStreamWriteClient) Recv() (*StreamWriteResponse, error) {
	m := new(StreamWriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonikerServiceServer is the server API for MonikerService service.
// All implementations must embed UnimplementedMonikerServiceServer
// for forward compatibility
type MonikerServiceServer interface {
	BeginSidebandStream(context.Context, *BeginMonikerSidebandStreamRequest) (*BeginMonikerSidebandStreamResponse, error)
	StreamReadWrite(MonikerService_StreamReadWriteServer) error
	StreamRead(*MonikerList, MonikerService_StreamReadServer) error
	StreamWrite(MonikerService_StreamWriteServer) error
	mustEmbedUnimplementedMonikerServiceServer()
}

// UnimplementedMonikerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMonikerServiceServer struct {
}

func (UnimplementedMonikerServiceServer) BeginSidebandStream(context.Context, *BeginMonikerSidebandStreamRequest) (*BeginMonikerSidebandStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginSidebandStream not implemented")
}
func (UnimplementedMonikerServiceServer) StreamReadWrite(MonikerService_StreamReadWriteServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReadWrite not implemented")
}
func (UnimplementedMonikerServiceServer) StreamRead(*MonikerList, MonikerService_StreamReadServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRead not implemented")
}
func (UnimplementedMonikerServiceServer) StreamWrite(MonikerService_StreamWriteServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamWrite not implemented")
}
func (UnimplementedMonikerServiceServer) mustEmbedUnimplementedMonikerServiceServer() {}

// UnsafeMonikerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonikerServiceServer will
// result in compilation errors.
type UnsafeMonikerServiceServer interface {
	mustEmbedUnimplementedMonikerServiceServer()
}

func RegisterMonikerServiceServer(s grpc.ServiceRegistrar, srv MonikerServiceServer) {
	s.RegisterService(&MonikerService_ServiceDesc, srv)
}

func _MonikerService_BeginSidebandStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginMonikerSidebandStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonikerServiceServer).BeginSidebandStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ni.data_monikers.MonikerService/BeginSidebandStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonikerServiceServer).BeginSidebandStream(ctx, req.(*BeginMonikerSidebandStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonikerService_StreamReadWrite_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonikerServiceServer).StreamReadWrite(&monikerServiceStreamReadWriteServer{stream})
}

type MonikerService_StreamReadWriteServer interface {
	Send(*MonikerReadResult) error
	Recv() (*MonikerWriteRequest, error)
	grpc.ServerStream
}

type monikerServiceStreamReadWriteServer struct {
	grpc.ServerStream
}

func (x *monikerServiceStreamReadWriteServer) Send(m *MonikerReadResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monikerServiceStreamReadWriteServer) Recv() (*MonikerWriteRequest, error) {
	m := new(MonikerWriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MonikerService_StreamRead_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonikerList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonikerServiceServer).StreamRead(m, &monikerServiceStreamReadServer{stream})
}

type MonikerService_StreamReadServer interface {
	Send(*MonikerReadResult) error
	grpc.ServerStream
}

type monikerServiceStreamReadServer struct {
	grpc.ServerStream
}

func (x *monikerServiceStreamReadServer) Send(m *MonikerReadResult) error {
	return x.ServerStream.SendMsg(m)
}

func _MonikerService_StreamWrite_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonikerServiceServer).StreamWrite(&monikerServiceStreamWriteServer{stream})
}

type MonikerService_StreamWriteServer interface {
	Send(*StreamWriteResponse) error
	Recv() (*MonikerWriteRequest, error)
	grpc.ServerStream
}

type monikerServiceStreamWriteServer struct {
	grpc.ServerStream
}

func (x *monikerServiceStreamWriteServer) Send(m *StreamWriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monikerServiceStreamWriteServer) Recv() (*MonikerWriteRequest, error) {
	m := new(MonikerWriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonikerService_ServiceDesc is the grpc.ServiceDesc for MonikerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonikerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ni.data_monikers.MonikerService",
	HandlerType: (*MonikerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeginSidebandStream",
			Handler:    _MonikerService_BeginSidebandStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReadWrite",
			Handler:       _MonikerService_StreamReadWrite_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamRead",
			Handler:       _MonikerService_StreamRead_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamWrite",
			Handler:       _MonikerService_StreamWrite_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "data_moniker.proto",
}
