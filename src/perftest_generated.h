// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PERFTEST_PERFTEST_H_
#define FLATBUFFERS_GENERATED_PERFTEST_PERFTEST_H_

#include "flatbuffers/flatbuffers.h"

namespace PerfTest {

struct ComplexNumber;

struct ReadComplexResult;
struct ReadComplexResultBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) ComplexNumber FLATBUFFERS_FINAL_CLASS {
 private:
  double real_;
  double imaginary_;

 public:
  ComplexNumber()
      : real_(0),
        imaginary_(0) {
  }
  ComplexNumber(double _real, double _imaginary)
      : real_(flatbuffers::EndianScalar(_real)),
        imaginary_(flatbuffers::EndianScalar(_imaginary)) {
  }
  double real() const {
    return flatbuffers::EndianScalar(real_);
  }
  double imaginary() const {
    return flatbuffers::EndianScalar(imaginary_);
  }
};
FLATBUFFERS_STRUCT_END(ComplexNumber, 16);

struct ReadComplexResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ReadComplexResultBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUES = 4,
    VT_STATUS = 6
  };
  const flatbuffers::Vector<const PerfTest::ComplexNumber *> *values() const {
    return GetPointer<const flatbuffers::Vector<const PerfTest::ComplexNumber *> *>(VT_VALUES);
  }
  int32_t status() const {
    return GetField<int32_t>(VT_STATUS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           VerifyField<int32_t>(verifier, VT_STATUS) &&
           verifier.EndTable();
  }
};

struct ReadComplexResultBuilder {
  typedef ReadComplexResult Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_values(flatbuffers::Offset<flatbuffers::Vector<const PerfTest::ComplexNumber *>> values) {
    fbb_.AddOffset(ReadComplexResult::VT_VALUES, values);
  }
  void add_status(int32_t status) {
    fbb_.AddElement<int32_t>(ReadComplexResult::VT_STATUS, status, 0);
  }
  explicit ReadComplexResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ReadComplexResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ReadComplexResult>(end);
    return o;
  }
};

inline flatbuffers::Offset<ReadComplexResult> CreateReadComplexResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const PerfTest::ComplexNumber *>> values = 0,
    int32_t status = 0) {
  ReadComplexResultBuilder builder_(_fbb);
  builder_.add_status(status);
  builder_.add_values(values);
  return builder_.Finish();
}

inline flatbuffers::Offset<ReadComplexResult> CreateReadComplexResultDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<PerfTest::ComplexNumber> *values = nullptr,
    int32_t status = 0) {
  auto values__ = values ? _fbb.CreateVectorOfStructs<PerfTest::ComplexNumber>(*values) : 0;
  return PerfTest::CreateReadComplexResult(
      _fbb,
      values__,
      status);
}

inline const PerfTest::ReadComplexResult *GetReadComplexResult(const void *buf) {
  return flatbuffers::GetRoot<PerfTest::ReadComplexResult>(buf);
}

inline const PerfTest::ReadComplexResult *GetSizePrefixedReadComplexResult(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<PerfTest::ReadComplexResult>(buf);
}

inline bool VerifyReadComplexResultBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PerfTest::ReadComplexResult>(nullptr);
}

inline bool VerifySizePrefixedReadComplexResultBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PerfTest::ReadComplexResult>(nullptr);
}

inline void FinishReadComplexResultBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PerfTest::ReadComplexResult> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedReadComplexResultBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PerfTest::ReadComplexResult> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace PerfTest

#endif  // FLATBUFFERS_GENERATED_PERFTEST_PERFTEST_H_
