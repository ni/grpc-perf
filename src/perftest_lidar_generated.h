// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PERFTESTLIDAR_PERFTEST_H_
#define FLATBUFFERS_GENERATED_PERFTESTLIDAR_PERFTEST_H_

#include "flatbuffers/flatbuffers.h"

namespace PerfTest {

struct LidarValue;

struct ReadLidarResult;
struct ReadLidarResultBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) LidarValue FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;
  double a_;

 public:
  LidarValue()
      : x_(0),
        y_(0),
        z_(0),
        a_(0) {
  }
  LidarValue(double _x, double _y, double _z, double _a)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)),
        a_(flatbuffers::EndianScalar(_a)) {
  }
  double x() const {
    return flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return flatbuffers::EndianScalar(z_);
  }
  double a() const {
    return flatbuffers::EndianScalar(a_);
  }
};
FLATBUFFERS_STRUCT_END(LidarValue, 32);

struct ReadLidarResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ReadLidarResultBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUES = 4,
    VT_STATUS = 6
  };
  const flatbuffers::Vector<const PerfTest::LidarValue *> *values() const {
    return GetPointer<const flatbuffers::Vector<const PerfTest::LidarValue *> *>(VT_VALUES);
  }
  int32_t status() const {
    return GetField<int32_t>(VT_STATUS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           VerifyField<int32_t>(verifier, VT_STATUS) &&
           verifier.EndTable();
  }
};

struct ReadLidarResultBuilder {
  typedef ReadLidarResult Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_values(flatbuffers::Offset<flatbuffers::Vector<const PerfTest::LidarValue *>> values) {
    fbb_.AddOffset(ReadLidarResult::VT_VALUES, values);
  }
  void add_status(int32_t status) {
    fbb_.AddElement<int32_t>(ReadLidarResult::VT_STATUS, status, 0);
  }
  explicit ReadLidarResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ReadLidarResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ReadLidarResult>(end);
    return o;
  }
};

inline flatbuffers::Offset<ReadLidarResult> CreateReadLidarResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const PerfTest::LidarValue *>> values = 0,
    int32_t status = 0) {
  ReadLidarResultBuilder builder_(_fbb);
  builder_.add_status(status);
  builder_.add_values(values);
  return builder_.Finish();
}

inline flatbuffers::Offset<ReadLidarResult> CreateReadLidarResultDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<PerfTest::LidarValue> *values = nullptr,
    int32_t status = 0) {
  auto values__ = values ? _fbb.CreateVectorOfStructs<PerfTest::LidarValue>(*values) : 0;
  return PerfTest::CreateReadLidarResult(
      _fbb,
      values__,
      status);
}

inline const PerfTest::ReadLidarResult *GetReadLidarResult(const void *buf) {
  return flatbuffers::GetRoot<PerfTest::ReadLidarResult>(buf);
}

inline const PerfTest::ReadLidarResult *GetSizePrefixedReadLidarResult(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<PerfTest::ReadLidarResult>(buf);
}

inline bool VerifyReadLidarResultBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PerfTest::ReadLidarResult>(nullptr);
}

inline bool VerifySizePrefixedReadLidarResultBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PerfTest::ReadLidarResult>(nullptr);
}

inline void FinishReadLidarResultBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PerfTest::ReadLidarResult> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedReadLidarResultBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PerfTest::ReadLidarResult> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace PerfTest

#endif  // FLATBUFFERS_GENERATED_PERFTESTLIDAR_PERFTEST_H_
